// commands/authgroup.js

const chalk = require('chalk');

module.exports = {
  name: 'authgroup',
  aliases: ['autorizar'],
  description: 'Autoriza o grupo atual a usar as fun√ß√µes do bot e gera um token de acesso.',
  
  /**
   * Executa o comando para autorizar um grupo.
   * @param {import('../index').GroupExecHook} options
   */
  async execute({ sock, msg, isGroup, sender, isOwner, db, invalidateSettingsCache }) {
    const commandName = 'authgroup';
    const groupId = msg.key.remoteJid;

    // =================================================================
    // 1. VERIFICA√á√ïES INICIAIS
    // =================================================================

    // Checa se o comando foi usado em um grupo. Essencial para o funcionamento.
    if (!isGroup) {
      console.log(chalk.yellow(`[DEBUG][${commandName}] Tentativa de uso fora de um grupo por ${sender}.`));
      return sock.sendMessage(sender, { text: '‚ö†Ô∏è Este comando s√≥ pode ser executado dentro de um grupo.' });
    }

    // Apenas o propriet√°rio do bot (definido no .env) pode autorizar novos grupos.
    if (!isOwner) {
      console.log(chalk.red(`[FAIL][${commandName}] Tentativa de uso n√£o autorizada por ${sender} no grupo ${groupId}.`));
      return sock.sendMessage(groupId, { text: '‚ùå Apenas o Dono do Bot pode executar este comando.' }, { quoted: msg });
    }

    // =================================================================
    // 2. VERIFICA√á√ÉO DE STATUS DE AUTORIZA√á√ÉO
    // =================================================================

    // Verifica se o grupo j√° foi autorizado anteriormente para evitar duplicidade.
    if (db.isGroupAuthorized(groupId)) {
      console.log(chalk.blue(`[INFO][${commandName}] Grupo ${groupId} j√° est√° autorizado.`));
      const text = `Este grupo j√° est√° autorizado.\n\nPara ver informa√ß√µes da autoriza√ß√£o e do token, use o comando \`/groupinfo\`.`;
      return sock.sendMessage(groupId, { text }, { quoted: msg });
    }

    // =================================================================
    // 3. EXECU√á√ÉO DA AUTORIZA√á√ÉO
    // =================================================================
    try {
      console.log(chalk.yellow(`[EXEC][${commandName}] Autorizando o grupo ${groupId} a pedido de ${sender}...`));

      // Chama a fun√ß√£o do banco de dados para autorizar o grupo.
      // A fun√ß√£o agora retorna o token de acesso gerado.
      const accessToken = db.authorizeGroup(groupId, sender);
      
      // Invalida o cache de configura√ß√µes para que as novas configura√ß√µes padr√£o sejam carregadas.
      invalidateSettingsCache();

      // Log de sucesso no console para depura√ß√£o.
      console.log(chalk.greenBright(`[SUCCESS][${commandName}] Grupo ${groupId} autorizado. Token: ${accessToken}`));

      // -------------------------------------------------
      // MENSAGEM P√öBLICA (para o grupo)
      // -------------------------------------------------
      const groupMessage = `‚úÖ *Grupo Autorizado com Sucesso!* üéâ\n\nEste grupo agora tem acesso √†s minhas funcionalidades.\n\nO usu√°rio @${sender.split('@')[0]} foi definido como o primeiro administrador do bot aqui.\n\nPara come√ßar, digite \`/menu\` para ver a lista de comandos.`;
      
      await sock.sendMessage(groupId, { 
        text: groupMessage,
        mentions: [sender] // Marca o usu√°rio que se tornou admin.
      });

      // -------------------------------------------------
      // MENSAGEM PRIVADA (para o dono do bot)
      // -------------------------------------------------
      // Envia o token de acesso de forma segura e privada para o dono do bot.
      const privateMessage = `üîê *Seu Token de Acesso Confidencial*\n\nOl√°! O grupo que voc√™ acabou de autorizar tem o seguinte token de acesso:\n\n*Token:* \`\`\`${accessToken}\`\`\`\n\n*Aten√ß√£o:* Este token √© como uma senha. **N√£o compartilhe com ningu√©m.** Ele ser√° usado para integrar o bot com sistemas externos, como um painel web.\n\nGuarde-o em um local seguro! Se precisar, voc√™ pode usar o comando \`/groupinfo\` no grupo para que eu envie o token novamente para voc√™ no privado.`;

      await sock.sendMessage(sender, { text: privateMessage });

    } catch (error) {
      // Em caso de falha, registra o erro detalhado no console.
      console.error(chalk.red.bold(`[CRITICAL_ERROR][${commandName}] Falha catastr√≥fica ao autorizar o grupo ${groupId}:`), error);
      
      // Envia uma mensagem de erro gen√©rica ao usu√°rio.
      await sock.sendMessage(groupId, { text: '‚ùå Ocorreu um erro cr√≠tico ao tentar autorizar o grupo. Por favor, verifique os logs do console.' }, { quoted: msg });
    }
  }
}
